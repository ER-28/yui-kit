{"version":3,"file":"StyledComponent.js","sourceRoot":"","sources":["../../../src/styled/StyledComponent.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,IAAI,EAAkB,MAAM,EAAE,MAAM,KAAK,CAAC;AAW/D,MAAM,UAAU,GAAG,CAAoC,UAAa,EAAE,EAAE;IACtE,MAAM,eAAgB,SAAQ,UAAU;QActC,YAAY,GAAG,IAAW;YACxB,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;YANjB,YAAO,GAAG,GAAG,CAAC;YACd,WAAM,GAAG,GAAG,CAAC;YACb,YAAO,GAAG,aAAa,CAAC;YACxB,OAAE,GAAG,KAAK,CAAC;QAIX,CAAC;QAED,YAAY,CAAC,OAAuB;YAClC,MAAM,MAAM,GAAG,IAAI,CAAA;;;;uBAIF,IAAI,CAAC,OAAO;sBACb,IAAI,CAAC,MAAM;gCACD,IAAI,CAAC,OAAO;;;OAGrC,CAAC;YAEF,OAAO,IAAI,CAAA;UACP,MAAM;UACN,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC;OACvC,CAAC;QACJ,CAAC;QAED,aAAa,CAAC,EAAU,EAAE,OAAuB;YAC/C,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAC3C,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAChC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACzB,OAAO,OAAO,CAAC;QACjB,CAAC;;IAxCM,0BAAU,GAAG;QAClB,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;QACzB,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;QACxB,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;QACzB,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;KACrB,AALgB,CAKf;IAsCJ,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAEF,OAAO,EAAE,UAAU,EAAE,CAAC","sourcesContent":["import { LitElement, html, TemplateResult, render } from 'lit';\n\ntype Constructor<T = {}> = new (...args: any[]) => T;\n\ninterface StyleMixinInterface {\n  padding: string;\n  margin: string;\n  bgColor: string;\n  as: string;\n}\n\nconst StyleMixin = <T extends Constructor<LitElement>>(superclass: T) => {\n  class StyleMixinClass extends superclass implements StyleMixinInterface {\n    static properties = {\n      padding: { type: String },\n      margin: { type: String },\n      bgColor: { type: String },\n      as: { type: String },\n    };\n\n\n    padding = '0';\n    margin = '0';\n    bgColor = 'transparent';\n    as = 'div';\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    styledRender(content: TemplateResult): TemplateResult {\n      const styles = html`\n        <style>\n          .styled {\n            display: block;\n            padding: ${this.padding};\n            margin: ${this.margin};\n            background-color: ${this.bgColor};\n          }\n        </style>\n      `;\n\n      return html`\n        ${styles}\n        ${this.renderElement(this.as, content)}\n      `;\n    }\n\n    renderElement(as: string, content: TemplateResult) {\n      const element = document.createElement(as);\n      element.classList.add('styled');\n      render(content, element);\n      return element;\n    }\n  }\n\n  return StyleMixinClass;\n};\n\nexport { StyleMixin };\n"]}